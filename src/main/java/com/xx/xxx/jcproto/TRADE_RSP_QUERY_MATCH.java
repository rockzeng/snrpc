// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from trade.proto

package com.xx.xxx.jcproto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TRADE_RSP_QUERY_MATCH implements Externalizable, Message<TRADE_RSP_QUERY_MATCH>
{

    public static Schema<TRADE_RSP_QUERY_MATCH> getSchema()
    {
        return SCHEMA;
    }

    public static TRADE_RSP_QUERY_MATCH getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TRADE_RSP_QUERY_MATCH DEFAULT_INSTANCE = new TRADE_RSP_QUERY_MATCH();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String brokerID;
    String investorID;
    String instrumentID;
    String orderRef;
    String userID;
    String exchangeID;
    String tradeID;
    Integer direction;
    String orderSysID;
    String participantID;
    String clientID;
    Integer tradingRole;
    Integer offsetFlag;
    Integer hedgeFlag;
    Double price;
    Integer volume;
    String tradeDate;
    String tradeTime;
    Integer tradeType;
    Integer priceSource;
    String traderID;
    String orderLocalID;
    String clearingPartID;
    String businessUnit;
    Integer sequenceNo;
    String tradingDay;
    Integer settlementID;
    Integer brokerOrderSeq;
    Integer tradeSource;
    Double exchBal;
    Double exchFare;
    Double margin;
    String rspcode;
    ByteString rspmsg;
    Integer bLast;

    public TRADE_RSP_QUERY_MATCH()
    {
        
    }

    public TRADE_RSP_QUERY_MATCH(
        String investorID,
        String instrumentID,
        String orderRef,
        String userID,
        String exchangeID,
        String tradeID,
        Integer direction,
        Integer offsetFlag,
        Integer hedgeFlag,
        Double price,
        Integer volume,
        String tradeDate,
        Double exchBal,
        Double exchFare,
        Double margin,
        String rspcode,
        ByteString rspmsg,
        Integer bLast
    )
    {
        this.investorID = investorID;
        this.instrumentID = instrumentID;
        this.orderRef = orderRef;
        this.userID = userID;
        this.exchangeID = exchangeID;
        this.tradeID = tradeID;
        this.direction = direction;
        this.offsetFlag = offsetFlag;
        this.hedgeFlag = hedgeFlag;
        this.price = price;
        this.volume = volume;
        this.tradeDate = tradeDate;
        this.exchBal = exchBal;
        this.exchFare = exchFare;
        this.margin = margin;
        this.rspcode = rspcode;
        this.rspmsg = rspmsg;
        this.bLast = bLast;
    }

    // getters and setters

    // brokerID

    public String getBrokerID()
    {
        return brokerID;
    }

    public void setBrokerID(String brokerID)
    {
        this.brokerID = brokerID;
    }

    // investorID

    public String getInvestorID()
    {
        return investorID;
    }

    public void setInvestorID(String investorID)
    {
        this.investorID = investorID;
    }

    // instrumentID

    public String getInstrumentID()
    {
        return instrumentID;
    }

    public void setInstrumentID(String instrumentID)
    {
        this.instrumentID = instrumentID;
    }

    // orderRef

    public String getOrderRef()
    {
        return orderRef;
    }

    public void setOrderRef(String orderRef)
    {
        this.orderRef = orderRef;
    }

    // userID

    public String getUserID()
    {
        return userID;
    }

    public void setUserID(String userID)
    {
        this.userID = userID;
    }

    // exchangeID

    public String getExchangeID()
    {
        return exchangeID;
    }

    public void setExchangeID(String exchangeID)
    {
        this.exchangeID = exchangeID;
    }

    // tradeID

    public String getTradeID()
    {
        return tradeID;
    }

    public void setTradeID(String tradeID)
    {
        this.tradeID = tradeID;
    }

    // direction

    public Integer getDirection()
    {
        return direction;
    }

    public void setDirection(Integer direction)
    {
        this.direction = direction;
    }

    // orderSysID

    public String getOrderSysID()
    {
        return orderSysID;
    }

    public void setOrderSysID(String orderSysID)
    {
        this.orderSysID = orderSysID;
    }

    // participantID

    public String getParticipantID()
    {
        return participantID;
    }

    public void setParticipantID(String participantID)
    {
        this.participantID = participantID;
    }

    // clientID

    public String getClientID()
    {
        return clientID;
    }

    public void setClientID(String clientID)
    {
        this.clientID = clientID;
    }

    // tradingRole

    public Integer getTradingRole()
    {
        return tradingRole;
    }

    public void setTradingRole(Integer tradingRole)
    {
        this.tradingRole = tradingRole;
    }

    // offsetFlag

    public Integer getOffsetFlag()
    {
        return offsetFlag;
    }

    public void setOffsetFlag(Integer offsetFlag)
    {
        this.offsetFlag = offsetFlag;
    }

    // hedgeFlag

    public Integer getHedgeFlag()
    {
        return hedgeFlag;
    }

    public void setHedgeFlag(Integer hedgeFlag)
    {
        this.hedgeFlag = hedgeFlag;
    }

    // price

    public Double getPrice()
    {
        return price;
    }

    public void setPrice(Double price)
    {
        this.price = price;
    }

    // volume

    public Integer getVolume()
    {
        return volume;
    }

    public void setVolume(Integer volume)
    {
        this.volume = volume;
    }

    // tradeDate

    public String getTradeDate()
    {
        return tradeDate;
    }

    public void setTradeDate(String tradeDate)
    {
        this.tradeDate = tradeDate;
    }

    // tradeTime

    public String getTradeTime()
    {
        return tradeTime;
    }

    public void setTradeTime(String tradeTime)
    {
        this.tradeTime = tradeTime;
    }

    // tradeType

    public Integer getTradeType()
    {
        return tradeType;
    }

    public void setTradeType(Integer tradeType)
    {
        this.tradeType = tradeType;
    }

    // priceSource

    public Integer getPriceSource()
    {
        return priceSource;
    }

    public void setPriceSource(Integer priceSource)
    {
        this.priceSource = priceSource;
    }

    // traderID

    public String getTraderID()
    {
        return traderID;
    }

    public void setTraderID(String traderID)
    {
        this.traderID = traderID;
    }

    // orderLocalID

    public String getOrderLocalID()
    {
        return orderLocalID;
    }

    public void setOrderLocalID(String orderLocalID)
    {
        this.orderLocalID = orderLocalID;
    }

    // clearingPartID

    public String getClearingPartID()
    {
        return clearingPartID;
    }

    public void setClearingPartID(String clearingPartID)
    {
        this.clearingPartID = clearingPartID;
    }

    // businessUnit

    public String getBusinessUnit()
    {
        return businessUnit;
    }

    public void setBusinessUnit(String businessUnit)
    {
        this.businessUnit = businessUnit;
    }

    // sequenceNo

    public Integer getSequenceNo()
    {
        return sequenceNo;
    }

    public void setSequenceNo(Integer sequenceNo)
    {
        this.sequenceNo = sequenceNo;
    }

    // tradingDay

    public String getTradingDay()
    {
        return tradingDay;
    }

    public void setTradingDay(String tradingDay)
    {
        this.tradingDay = tradingDay;
    }

    // settlementID

    public Integer getSettlementID()
    {
        return settlementID;
    }

    public void setSettlementID(Integer settlementID)
    {
        this.settlementID = settlementID;
    }

    // brokerOrderSeq

    public Integer getBrokerOrderSeq()
    {
        return brokerOrderSeq;
    }

    public void setBrokerOrderSeq(Integer brokerOrderSeq)
    {
        this.brokerOrderSeq = brokerOrderSeq;
    }

    // tradeSource

    public Integer getTradeSource()
    {
        return tradeSource;
    }

    public void setTradeSource(Integer tradeSource)
    {
        this.tradeSource = tradeSource;
    }

    // exchBal

    public Double getExchBal()
    {
        return exchBal;
    }

    public void setExchBal(Double exchBal)
    {
        this.exchBal = exchBal;
    }

    // exchFare

    public Double getExchFare()
    {
        return exchFare;
    }

    public void setExchFare(Double exchFare)
    {
        this.exchFare = exchFare;
    }

    // margin

    public Double getMargin()
    {
        return margin;
    }

    public void setMargin(Double margin)
    {
        this.margin = margin;
    }

    // rspcode

    public String getRspcode()
    {
        return rspcode;
    }

    public void setRspcode(String rspcode)
    {
        this.rspcode = rspcode;
    }

    // rspmsg

    public ByteString getRspmsg()
    {
        return rspmsg;
    }

    public void setRspmsg(ByteString rspmsg)
    {
        this.rspmsg = rspmsg;
    }

    // bLast

    public Integer getBLast()
    {
        return bLast;
    }

    public void setBLast(Integer bLast)
    {
        this.bLast = bLast;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<TRADE_RSP_QUERY_MATCH> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<TRADE_RSP_QUERY_MATCH> SCHEMA = new Schema<TRADE_RSP_QUERY_MATCH>()
    {
        // schema methods

        public TRADE_RSP_QUERY_MATCH newMessage()
        {
            return new TRADE_RSP_QUERY_MATCH();
        }

        public Class<TRADE_RSP_QUERY_MATCH> typeClass()
        {
            return TRADE_RSP_QUERY_MATCH.class;
        }

        public String messageName()
        {
            return TRADE_RSP_QUERY_MATCH.class.getSimpleName();
        }

        public String messageFullName()
        {
            return TRADE_RSP_QUERY_MATCH.class.getName();
        }

        public boolean isInitialized(TRADE_RSP_QUERY_MATCH message)
        {
            return 
                message.investorID != null 
                && message.instrumentID != null 
                && message.orderRef != null 
                && message.userID != null 
                && message.exchangeID != null 
                && message.tradeID != null 
                && message.direction != null 
                && message.offsetFlag != null 
                && message.hedgeFlag != null 
                && message.price != null 
                && message.volume != null 
                && message.tradeDate != null 
                && message.exchBal != null 
                && message.exchFare != null 
                && message.margin != null 
                && message.rspcode != null 
                && message.rspmsg != null 
                && message.bLast != null;
        }

        public void mergeFrom(Input input, TRADE_RSP_QUERY_MATCH message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.brokerID = input.readString();
                        break;
                    case 2:
                        message.investorID = input.readString();
                        break;
                    case 3:
                        message.instrumentID = input.readString();
                        break;
                    case 4:
                        message.orderRef = input.readString();
                        break;
                    case 5:
                        message.userID = input.readString();
                        break;
                    case 6:
                        message.exchangeID = input.readString();
                        break;
                    case 7:
                        message.tradeID = input.readString();
                        break;
                    case 8:
                        message.direction = input.readInt32();
                        break;
                    case 9:
                        message.orderSysID = input.readString();
                        break;
                    case 10:
                        message.participantID = input.readString();
                        break;
                    case 11:
                        message.clientID = input.readString();
                        break;
                    case 12:
                        message.tradingRole = input.readInt32();
                        break;
                    case 13:
                        message.offsetFlag = input.readInt32();
                        break;
                    case 14:
                        message.hedgeFlag = input.readInt32();
                        break;
                    case 15:
                        message.price = input.readDouble();
                        break;
                    case 16:
                        message.volume = input.readInt32();
                        break;
                    case 17:
                        message.tradeDate = input.readString();
                        break;
                    case 18:
                        message.tradeTime = input.readString();
                        break;
                    case 19:
                        message.tradeType = input.readInt32();
                        break;
                    case 20:
                        message.priceSource = input.readInt32();
                        break;
                    case 21:
                        message.traderID = input.readString();
                        break;
                    case 22:
                        message.orderLocalID = input.readString();
                        break;
                    case 23:
                        message.clearingPartID = input.readString();
                        break;
                    case 24:
                        message.businessUnit = input.readString();
                        break;
                    case 25:
                        message.sequenceNo = input.readInt32();
                        break;
                    case 26:
                        message.tradingDay = input.readString();
                        break;
                    case 27:
                        message.settlementID = input.readInt32();
                        break;
                    case 28:
                        message.brokerOrderSeq = input.readInt32();
                        break;
                    case 29:
                        message.tradeSource = input.readInt32();
                        break;
                    case 30:
                        message.exchBal = input.readDouble();
                        break;
                    case 31:
                        message.exchFare = input.readDouble();
                        break;
                    case 32:
                        message.margin = input.readDouble();
                        break;
                    case 33:
                        message.rspcode = input.readString();
                        break;
                    case 34:
                        message.rspmsg = input.readBytes();
                        break;
                    case 35:
                        message.bLast = input.readInt32();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, TRADE_RSP_QUERY_MATCH message) throws IOException
        {
            if(message.brokerID != null)
                output.writeString(1, message.brokerID, false);

            if(message.investorID == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.investorID, false);

            if(message.instrumentID == null)
                throw new UninitializedMessageException(message);
            output.writeString(3, message.instrumentID, false);

            if(message.orderRef == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.orderRef, false);

            if(message.userID == null)
                throw new UninitializedMessageException(message);
            output.writeString(5, message.userID, false);

            if(message.exchangeID == null)
                throw new UninitializedMessageException(message);
            output.writeString(6, message.exchangeID, false);

            if(message.tradeID == null)
                throw new UninitializedMessageException(message);
            output.writeString(7, message.tradeID, false);

            if(message.direction == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(8, message.direction, false);

            if(message.orderSysID != null)
                output.writeString(9, message.orderSysID, false);

            if(message.participantID != null)
                output.writeString(10, message.participantID, false);

            if(message.clientID != null)
                output.writeString(11, message.clientID, false);

            if(message.tradingRole != null)
                output.writeInt32(12, message.tradingRole, false);

            if(message.offsetFlag == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(13, message.offsetFlag, false);

            if(message.hedgeFlag == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(14, message.hedgeFlag, false);

            if(message.price == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(15, message.price, false);

            if(message.volume == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(16, message.volume, false);

            if(message.tradeDate == null)
                throw new UninitializedMessageException(message);
            output.writeString(17, message.tradeDate, false);

            if(message.tradeTime != null)
                output.writeString(18, message.tradeTime, false);

            if(message.tradeType != null)
                output.writeInt32(19, message.tradeType, false);

            if(message.priceSource != null)
                output.writeInt32(20, message.priceSource, false);

            if(message.traderID != null)
                output.writeString(21, message.traderID, false);

            if(message.orderLocalID != null)
                output.writeString(22, message.orderLocalID, false);

            if(message.clearingPartID != null)
                output.writeString(23, message.clearingPartID, false);

            if(message.businessUnit != null)
                output.writeString(24, message.businessUnit, false);

            if(message.sequenceNo != null)
                output.writeInt32(25, message.sequenceNo, false);

            if(message.tradingDay != null)
                output.writeString(26, message.tradingDay, false);

            if(message.settlementID != null)
                output.writeInt32(27, message.settlementID, false);

            if(message.brokerOrderSeq != null)
                output.writeInt32(28, message.brokerOrderSeq, false);

            if(message.tradeSource != null)
                output.writeInt32(29, message.tradeSource, false);

            if(message.exchBal == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(30, message.exchBal, false);

            if(message.exchFare == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(31, message.exchFare, false);

            if(message.margin == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(32, message.margin, false);

            if(message.rspcode == null)
                throw new UninitializedMessageException(message);
            output.writeString(33, message.rspcode, false);

            if(message.rspmsg == null)
                throw new UninitializedMessageException(message);
            output.writeBytes(34, message.rspmsg, false);

            if(message.bLast == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(35, message.bLast, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "brokerID";
                case 2: return "investorID";
                case 3: return "instrumentID";
                case 4: return "orderRef";
                case 5: return "userID";
                case 6: return "exchangeID";
                case 7: return "tradeID";
                case 8: return "direction";
                case 9: return "orderSysID";
                case 10: return "participantID";
                case 11: return "clientID";
                case 12: return "tradingRole";
                case 13: return "offsetFlag";
                case 14: return "hedgeFlag";
                case 15: return "price";
                case 16: return "volume";
                case 17: return "tradeDate";
                case 18: return "tradeTime";
                case 19: return "tradeType";
                case 20: return "priceSource";
                case 21: return "traderID";
                case 22: return "orderLocalID";
                case 23: return "clearingPartID";
                case 24: return "businessUnit";
                case 25: return "sequenceNo";
                case 26: return "tradingDay";
                case 27: return "settlementID";
                case 28: return "brokerOrderSeq";
                case 29: return "tradeSource";
                case 30: return "exchBal";
                case 31: return "exchFare";
                case 32: return "margin";
                case 33: return "rspcode";
                case 34: return "rspmsg";
                case 35: return "bLast";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("brokerID", 1);
            fieldMap.put("investorID", 2);
            fieldMap.put("instrumentID", 3);
            fieldMap.put("orderRef", 4);
            fieldMap.put("userID", 5);
            fieldMap.put("exchangeID", 6);
            fieldMap.put("tradeID", 7);
            fieldMap.put("direction", 8);
            fieldMap.put("orderSysID", 9);
            fieldMap.put("participantID", 10);
            fieldMap.put("clientID", 11);
            fieldMap.put("tradingRole", 12);
            fieldMap.put("offsetFlag", 13);
            fieldMap.put("hedgeFlag", 14);
            fieldMap.put("price", 15);
            fieldMap.put("volume", 16);
            fieldMap.put("tradeDate", 17);
            fieldMap.put("tradeTime", 18);
            fieldMap.put("tradeType", 19);
            fieldMap.put("priceSource", 20);
            fieldMap.put("traderID", 21);
            fieldMap.put("orderLocalID", 22);
            fieldMap.put("clearingPartID", 23);
            fieldMap.put("businessUnit", 24);
            fieldMap.put("sequenceNo", 25);
            fieldMap.put("tradingDay", 26);
            fieldMap.put("settlementID", 27);
            fieldMap.put("brokerOrderSeq", 28);
            fieldMap.put("tradeSource", 29);
            fieldMap.put("exchBal", 30);
            fieldMap.put("exchFare", 31);
            fieldMap.put("margin", 32);
            fieldMap.put("rspcode", 33);
            fieldMap.put("rspmsg", 34);
            fieldMap.put("bLast", 35);
        }
    };
    
}
