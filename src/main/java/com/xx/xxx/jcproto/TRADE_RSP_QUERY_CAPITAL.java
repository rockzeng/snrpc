// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from trade.proto

package com.xx.xxx.jcproto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TRADE_RSP_QUERY_CAPITAL implements Externalizable, Message<TRADE_RSP_QUERY_CAPITAL>
{

    public static Schema<TRADE_RSP_QUERY_CAPITAL> getSchema()
    {
        return SCHEMA;
    }

    public static TRADE_RSP_QUERY_CAPITAL getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TRADE_RSP_QUERY_CAPITAL DEFAULT_INSTANCE = new TRADE_RSP_QUERY_CAPITAL();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String brokerID;
    String accountID;
    Double preBalance;
    Double preMargin;
    Double deposit;
    Double withdraw;
    Double frozenMargin;
    Double frozenCash;
    Double frozenCommission;
    Double currMargin;
    Double commission;
    Double closeProfit;
    Double positionProfit;
    Double balance;
    Double available;
    Double withdrawQuota;
    Double reserve;
    String tradingDay;
    Double deliveryMargin;
    Double exchangeDeliveryMargin;
    Double reserveBalance;
    String currencyID;
    Double specProductMargin;
    Double specProductFrozenMargin;
    Double specProductCommission;
    Double specProductFrozenCommission;
    Double specProductPositionProfit;
    Double specProductCloseProfit;
    Double specProductPositionProfitByAlg;
    Double specProductExchangeMargin;
    String rspcode;
    ByteString rspmsg;

    public TRADE_RSP_QUERY_CAPITAL()
    {
        
    }

    public TRADE_RSP_QUERY_CAPITAL(
        String accountID,
        Double deposit,
        Double withdraw,
        Double frozenMargin,
        Double frozenCash,
        Double frozenCommission,
        Double currMargin,
        Double commission,
        Double closeProfit,
        Double positionProfit,
        Double balance,
        Double available,
        Double withdrawQuota,
        Double reserve,
        String rspcode,
        ByteString rspmsg
    )
    {
        this.accountID = accountID;
        this.deposit = deposit;
        this.withdraw = withdraw;
        this.frozenMargin = frozenMargin;
        this.frozenCash = frozenCash;
        this.frozenCommission = frozenCommission;
        this.currMargin = currMargin;
        this.commission = commission;
        this.closeProfit = closeProfit;
        this.positionProfit = positionProfit;
        this.balance = balance;
        this.available = available;
        this.withdrawQuota = withdrawQuota;
        this.reserve = reserve;
        this.rspcode = rspcode;
        this.rspmsg = rspmsg;
    }

    // getters and setters

    // brokerID

    public String getBrokerID()
    {
        return brokerID;
    }

    public void setBrokerID(String brokerID)
    {
        this.brokerID = brokerID;
    }

    // accountID

    public String getAccountID()
    {
        return accountID;
    }

    public void setAccountID(String accountID)
    {
        this.accountID = accountID;
    }

    // preBalance

    public Double getPreBalance()
    {
        return preBalance;
    }

    public void setPreBalance(Double preBalance)
    {
        this.preBalance = preBalance;
    }

    // preMargin

    public Double getPreMargin()
    {
        return preMargin;
    }

    public void setPreMargin(Double preMargin)
    {
        this.preMargin = preMargin;
    }

    // deposit

    public Double getDeposit()
    {
        return deposit;
    }

    public void setDeposit(Double deposit)
    {
        this.deposit = deposit;
    }

    // withdraw

    public Double getWithdraw()
    {
        return withdraw;
    }

    public void setWithdraw(Double withdraw)
    {
        this.withdraw = withdraw;
    }

    // frozenMargin

    public Double getFrozenMargin()
    {
        return frozenMargin;
    }

    public void setFrozenMargin(Double frozenMargin)
    {
        this.frozenMargin = frozenMargin;
    }

    // frozenCash

    public Double getFrozenCash()
    {
        return frozenCash;
    }

    public void setFrozenCash(Double frozenCash)
    {
        this.frozenCash = frozenCash;
    }

    // frozenCommission

    public Double getFrozenCommission()
    {
        return frozenCommission;
    }

    public void setFrozenCommission(Double frozenCommission)
    {
        this.frozenCommission = frozenCommission;
    }

    // currMargin

    public Double getCurrMargin()
    {
        return currMargin;
    }

    public void setCurrMargin(Double currMargin)
    {
        this.currMargin = currMargin;
    }

    // commission

    public Double getCommission()
    {
        return commission;
    }

    public void setCommission(Double commission)
    {
        this.commission = commission;
    }

    // closeProfit

    public Double getCloseProfit()
    {
        return closeProfit;
    }

    public void setCloseProfit(Double closeProfit)
    {
        this.closeProfit = closeProfit;
    }

    // positionProfit

    public Double getPositionProfit()
    {
        return positionProfit;
    }

    public void setPositionProfit(Double positionProfit)
    {
        this.positionProfit = positionProfit;
    }

    // balance

    public Double getBalance()
    {
        return balance;
    }

    public void setBalance(Double balance)
    {
        this.balance = balance;
    }

    // available

    public Double getAvailable()
    {
        return available;
    }

    public void setAvailable(Double available)
    {
        this.available = available;
    }

    // withdrawQuota

    public Double getWithdrawQuota()
    {
        return withdrawQuota;
    }

    public void setWithdrawQuota(Double withdrawQuota)
    {
        this.withdrawQuota = withdrawQuota;
    }

    // reserve

    public Double getReserve()
    {
        return reserve;
    }

    public void setReserve(Double reserve)
    {
        this.reserve = reserve;
    }

    // tradingDay

    public String getTradingDay()
    {
        return tradingDay;
    }

    public void setTradingDay(String tradingDay)
    {
        this.tradingDay = tradingDay;
    }

    // deliveryMargin

    public Double getDeliveryMargin()
    {
        return deliveryMargin;
    }

    public void setDeliveryMargin(Double deliveryMargin)
    {
        this.deliveryMargin = deliveryMargin;
    }

    // exchangeDeliveryMargin

    public Double getExchangeDeliveryMargin()
    {
        return exchangeDeliveryMargin;
    }

    public void setExchangeDeliveryMargin(Double exchangeDeliveryMargin)
    {
        this.exchangeDeliveryMargin = exchangeDeliveryMargin;
    }

    // reserveBalance

    public Double getReserveBalance()
    {
        return reserveBalance;
    }

    public void setReserveBalance(Double reserveBalance)
    {
        this.reserveBalance = reserveBalance;
    }

    // currencyID

    public String getCurrencyID()
    {
        return currencyID;
    }

    public void setCurrencyID(String currencyID)
    {
        this.currencyID = currencyID;
    }

    // specProductMargin

    public Double getSpecProductMargin()
    {
        return specProductMargin;
    }

    public void setSpecProductMargin(Double specProductMargin)
    {
        this.specProductMargin = specProductMargin;
    }

    // specProductFrozenMargin

    public Double getSpecProductFrozenMargin()
    {
        return specProductFrozenMargin;
    }

    public void setSpecProductFrozenMargin(Double specProductFrozenMargin)
    {
        this.specProductFrozenMargin = specProductFrozenMargin;
    }

    // specProductCommission

    public Double getSpecProductCommission()
    {
        return specProductCommission;
    }

    public void setSpecProductCommission(Double specProductCommission)
    {
        this.specProductCommission = specProductCommission;
    }

    // specProductFrozenCommission

    public Double getSpecProductFrozenCommission()
    {
        return specProductFrozenCommission;
    }

    public void setSpecProductFrozenCommission(Double specProductFrozenCommission)
    {
        this.specProductFrozenCommission = specProductFrozenCommission;
    }

    // specProductPositionProfit

    public Double getSpecProductPositionProfit()
    {
        return specProductPositionProfit;
    }

    public void setSpecProductPositionProfit(Double specProductPositionProfit)
    {
        this.specProductPositionProfit = specProductPositionProfit;
    }

    // specProductCloseProfit

    public Double getSpecProductCloseProfit()
    {
        return specProductCloseProfit;
    }

    public void setSpecProductCloseProfit(Double specProductCloseProfit)
    {
        this.specProductCloseProfit = specProductCloseProfit;
    }

    // specProductPositionProfitByAlg

    public Double getSpecProductPositionProfitByAlg()
    {
        return specProductPositionProfitByAlg;
    }

    public void setSpecProductPositionProfitByAlg(Double specProductPositionProfitByAlg)
    {
        this.specProductPositionProfitByAlg = specProductPositionProfitByAlg;
    }

    // specProductExchangeMargin

    public Double getSpecProductExchangeMargin()
    {
        return specProductExchangeMargin;
    }

    public void setSpecProductExchangeMargin(Double specProductExchangeMargin)
    {
        this.specProductExchangeMargin = specProductExchangeMargin;
    }

    // rspcode

    public String getRspcode()
    {
        return rspcode;
    }

    public void setRspcode(String rspcode)
    {
        this.rspcode = rspcode;
    }

    // rspmsg

    public ByteString getRspmsg()
    {
        return rspmsg;
    }

    public void setRspmsg(ByteString rspmsg)
    {
        this.rspmsg = rspmsg;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<TRADE_RSP_QUERY_CAPITAL> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<TRADE_RSP_QUERY_CAPITAL> SCHEMA = new Schema<TRADE_RSP_QUERY_CAPITAL>()
    {
        // schema methods

        public TRADE_RSP_QUERY_CAPITAL newMessage()
        {
            return new TRADE_RSP_QUERY_CAPITAL();
        }

        public Class<TRADE_RSP_QUERY_CAPITAL> typeClass()
        {
            return TRADE_RSP_QUERY_CAPITAL.class;
        }

        public String messageName()
        {
            return TRADE_RSP_QUERY_CAPITAL.class.getSimpleName();
        }

        public String messageFullName()
        {
            return TRADE_RSP_QUERY_CAPITAL.class.getName();
        }

        public boolean isInitialized(TRADE_RSP_QUERY_CAPITAL message)
        {
            return 
                message.accountID != null 
                && message.deposit != null 
                && message.withdraw != null 
                && message.frozenMargin != null 
                && message.frozenCash != null 
                && message.frozenCommission != null 
                && message.currMargin != null 
                && message.commission != null 
                && message.closeProfit != null 
                && message.positionProfit != null 
                && message.balance != null 
                && message.available != null 
                && message.withdrawQuota != null 
                && message.reserve != null 
                && message.rspcode != null 
                && message.rspmsg != null;
        }

        public void mergeFrom(Input input, TRADE_RSP_QUERY_CAPITAL message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.brokerID = input.readString();
                        break;
                    case 2:
                        message.accountID = input.readString();
                        break;
                    case 3:
                        message.preBalance = input.readDouble();
                        break;
                    case 4:
                        message.preMargin = input.readDouble();
                        break;
                    case 5:
                        message.deposit = input.readDouble();
                        break;
                    case 6:
                        message.withdraw = input.readDouble();
                        break;
                    case 7:
                        message.frozenMargin = input.readDouble();
                        break;
                    case 8:
                        message.frozenCash = input.readDouble();
                        break;
                    case 9:
                        message.frozenCommission = input.readDouble();
                        break;
                    case 10:
                        message.currMargin = input.readDouble();
                        break;
                    case 11:
                        message.commission = input.readDouble();
                        break;
                    case 12:
                        message.closeProfit = input.readDouble();
                        break;
                    case 13:
                        message.positionProfit = input.readDouble();
                        break;
                    case 14:
                        message.balance = input.readDouble();
                        break;
                    case 15:
                        message.available = input.readDouble();
                        break;
                    case 16:
                        message.withdrawQuota = input.readDouble();
                        break;
                    case 17:
                        message.reserve = input.readDouble();
                        break;
                    case 18:
                        message.tradingDay = input.readString();
                        break;
                    case 19:
                        message.deliveryMargin = input.readDouble();
                        break;
                    case 20:
                        message.exchangeDeliveryMargin = input.readDouble();
                        break;
                    case 21:
                        message.reserveBalance = input.readDouble();
                        break;
                    case 22:
                        message.currencyID = input.readString();
                        break;
                    case 23:
                        message.specProductMargin = input.readDouble();
                        break;
                    case 24:
                        message.specProductFrozenMargin = input.readDouble();
                        break;
                    case 25:
                        message.specProductCommission = input.readDouble();
                        break;
                    case 26:
                        message.specProductFrozenCommission = input.readDouble();
                        break;
                    case 27:
                        message.specProductPositionProfit = input.readDouble();
                        break;
                    case 28:
                        message.specProductCloseProfit = input.readDouble();
                        break;
                    case 29:
                        message.specProductPositionProfitByAlg = input.readDouble();
                        break;
                    case 30:
                        message.specProductExchangeMargin = input.readDouble();
                        break;
                    case 31:
                        message.rspcode = input.readString();
                        break;
                    case 32:
                        message.rspmsg = input.readBytes();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, TRADE_RSP_QUERY_CAPITAL message) throws IOException
        {
            if(message.brokerID != null)
                output.writeString(1, message.brokerID, false);

            if(message.accountID == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.accountID, false);

            if(message.preBalance != null)
                output.writeDouble(3, message.preBalance, false);

            if(message.preMargin != null)
                output.writeDouble(4, message.preMargin, false);

            if(message.deposit == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(5, message.deposit, false);

            if(message.withdraw == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(6, message.withdraw, false);

            if(message.frozenMargin == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(7, message.frozenMargin, false);

            if(message.frozenCash == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(8, message.frozenCash, false);

            if(message.frozenCommission == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(9, message.frozenCommission, false);

            if(message.currMargin == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(10, message.currMargin, false);

            if(message.commission == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(11, message.commission, false);

            if(message.closeProfit == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(12, message.closeProfit, false);

            if(message.positionProfit == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(13, message.positionProfit, false);

            if(message.balance == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(14, message.balance, false);

            if(message.available == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(15, message.available, false);

            if(message.withdrawQuota == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(16, message.withdrawQuota, false);

            if(message.reserve == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(17, message.reserve, false);

            if(message.tradingDay != null)
                output.writeString(18, message.tradingDay, false);

            if(message.deliveryMargin != null)
                output.writeDouble(19, message.deliveryMargin, false);

            if(message.exchangeDeliveryMargin != null)
                output.writeDouble(20, message.exchangeDeliveryMargin, false);

            if(message.reserveBalance != null)
                output.writeDouble(21, message.reserveBalance, false);

            if(message.currencyID != null)
                output.writeString(22, message.currencyID, false);

            if(message.specProductMargin != null)
                output.writeDouble(23, message.specProductMargin, false);

            if(message.specProductFrozenMargin != null)
                output.writeDouble(24, message.specProductFrozenMargin, false);

            if(message.specProductCommission != null)
                output.writeDouble(25, message.specProductCommission, false);

            if(message.specProductFrozenCommission != null)
                output.writeDouble(26, message.specProductFrozenCommission, false);

            if(message.specProductPositionProfit != null)
                output.writeDouble(27, message.specProductPositionProfit, false);

            if(message.specProductCloseProfit != null)
                output.writeDouble(28, message.specProductCloseProfit, false);

            if(message.specProductPositionProfitByAlg != null)
                output.writeDouble(29, message.specProductPositionProfitByAlg, false);

            if(message.specProductExchangeMargin != null)
                output.writeDouble(30, message.specProductExchangeMargin, false);

            if(message.rspcode == null)
                throw new UninitializedMessageException(message);
            output.writeString(31, message.rspcode, false);

            if(message.rspmsg == null)
                throw new UninitializedMessageException(message);
            output.writeBytes(32, message.rspmsg, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "brokerID";
                case 2: return "accountID";
                case 3: return "preBalance";
                case 4: return "preMargin";
                case 5: return "deposit";
                case 6: return "withdraw";
                case 7: return "frozenMargin";
                case 8: return "frozenCash";
                case 9: return "frozenCommission";
                case 10: return "currMargin";
                case 11: return "commission";
                case 12: return "closeProfit";
                case 13: return "positionProfit";
                case 14: return "balance";
                case 15: return "available";
                case 16: return "withdrawQuota";
                case 17: return "reserve";
                case 18: return "tradingDay";
                case 19: return "deliveryMargin";
                case 20: return "exchangeDeliveryMargin";
                case 21: return "reserveBalance";
                case 22: return "currencyID";
                case 23: return "specProductMargin";
                case 24: return "specProductFrozenMargin";
                case 25: return "specProductCommission";
                case 26: return "specProductFrozenCommission";
                case 27: return "specProductPositionProfit";
                case 28: return "specProductCloseProfit";
                case 29: return "specProductPositionProfitByAlg";
                case 30: return "specProductExchangeMargin";
                case 31: return "rspcode";
                case 32: return "rspmsg";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("brokerID", 1);
            fieldMap.put("accountID", 2);
            fieldMap.put("preBalance", 3);
            fieldMap.put("preMargin", 4);
            fieldMap.put("deposit", 5);
            fieldMap.put("withdraw", 6);
            fieldMap.put("frozenMargin", 7);
            fieldMap.put("frozenCash", 8);
            fieldMap.put("frozenCommission", 9);
            fieldMap.put("currMargin", 10);
            fieldMap.put("commission", 11);
            fieldMap.put("closeProfit", 12);
            fieldMap.put("positionProfit", 13);
            fieldMap.put("balance", 14);
            fieldMap.put("available", 15);
            fieldMap.put("withdrawQuota", 16);
            fieldMap.put("reserve", 17);
            fieldMap.put("tradingDay", 18);
            fieldMap.put("deliveryMargin", 19);
            fieldMap.put("exchangeDeliveryMargin", 20);
            fieldMap.put("reserveBalance", 21);
            fieldMap.put("currencyID", 22);
            fieldMap.put("specProductMargin", 23);
            fieldMap.put("specProductFrozenMargin", 24);
            fieldMap.put("specProductCommission", 25);
            fieldMap.put("specProductFrozenCommission", 26);
            fieldMap.put("specProductPositionProfit", 27);
            fieldMap.put("specProductCloseProfit", 28);
            fieldMap.put("specProductPositionProfitByAlg", 29);
            fieldMap.put("specProductExchangeMargin", 30);
            fieldMap.put("rspcode", 31);
            fieldMap.put("rspmsg", 32);
        }
    };
    
}
