// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from trade.proto

package com.xx.xxx.jcproto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TRADE_REQ_LOGIN implements Externalizable, Message<TRADE_REQ_LOGIN>
{

    public static Schema<TRADE_REQ_LOGIN> getSchema()
    {
        return SCHEMA;
    }

    public static TRADE_REQ_LOGIN getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TRADE_REQ_LOGIN DEFAULT_INSTANCE = new TRADE_REQ_LOGIN();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String tradingDay;
    String brokerID;
    String userID;
    String password;
    String userProductInfo;
    String interfaceProductInfo;
    String protocolInfo;
    String macAddress;
    String oneTimePassword;
    String clientIPAddress;

    public TRADE_REQ_LOGIN()
    {
        
    }

    public TRADE_REQ_LOGIN(
        String tradingDay,
        String brokerID,
        String userID,
        String password
    )
    {
        this.tradingDay = tradingDay;
        this.brokerID = brokerID;
        this.userID = userID;
        this.password = password;
    }

    // getters and setters

    // tradingDay

    public String getTradingDay()
    {
        return tradingDay;
    }

    public void setTradingDay(String tradingDay)
    {
        this.tradingDay = tradingDay;
    }

    // brokerID

    public String getBrokerID()
    {
        return brokerID;
    }

    public void setBrokerID(String brokerID)
    {
        this.brokerID = brokerID;
    }

    // userID

    public String getUserID()
    {
        return userID;
    }

    public void setUserID(String userID)
    {
        this.userID = userID;
    }

    // password

    public String getPassword()
    {
        return password;
    }

    public void setPassword(String password)
    {
        this.password = password;
    }

    // userProductInfo

    public String getUserProductInfo()
    {
        return userProductInfo;
    }

    public void setUserProductInfo(String userProductInfo)
    {
        this.userProductInfo = userProductInfo;
    }

    // interfaceProductInfo

    public String getInterfaceProductInfo()
    {
        return interfaceProductInfo;
    }

    public void setInterfaceProductInfo(String interfaceProductInfo)
    {
        this.interfaceProductInfo = interfaceProductInfo;
    }

    // protocolInfo

    public String getProtocolInfo()
    {
        return protocolInfo;
    }

    public void setProtocolInfo(String protocolInfo)
    {
        this.protocolInfo = protocolInfo;
    }

    // macAddress

    public String getMacAddress()
    {
        return macAddress;
    }

    public void setMacAddress(String macAddress)
    {
        this.macAddress = macAddress;
    }

    // oneTimePassword

    public String getOneTimePassword()
    {
        return oneTimePassword;
    }

    public void setOneTimePassword(String oneTimePassword)
    {
        this.oneTimePassword = oneTimePassword;
    }

    // clientIPAddress

    public String getClientIPAddress()
    {
        return clientIPAddress;
    }

    public void setClientIPAddress(String clientIPAddress)
    {
        this.clientIPAddress = clientIPAddress;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<TRADE_REQ_LOGIN> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<TRADE_REQ_LOGIN> SCHEMA = new Schema<TRADE_REQ_LOGIN>()
    {
        // schema methods

        public TRADE_REQ_LOGIN newMessage()
        {
            return new TRADE_REQ_LOGIN();
        }

        public Class<TRADE_REQ_LOGIN> typeClass()
        {
            return TRADE_REQ_LOGIN.class;
        }

        public String messageName()
        {
            return TRADE_REQ_LOGIN.class.getSimpleName();
        }

        public String messageFullName()
        {
            return TRADE_REQ_LOGIN.class.getName();
        }

        public boolean isInitialized(TRADE_REQ_LOGIN message)
        {
            return 
                message.tradingDay != null 
                && message.brokerID != null 
                && message.userID != null 
                && message.password != null;
        }

        public void mergeFrom(Input input, TRADE_REQ_LOGIN message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.tradingDay = input.readString();
                        break;
                    case 2:
                        message.brokerID = input.readString();
                        break;
                    case 3:
                        message.userID = input.readString();
                        break;
                    case 4:
                        message.password = input.readString();
                        break;
                    case 5:
                        message.userProductInfo = input.readString();
                        break;
                    case 6:
                        message.interfaceProductInfo = input.readString();
                        break;
                    case 7:
                        message.protocolInfo = input.readString();
                        break;
                    case 8:
                        message.macAddress = input.readString();
                        break;
                    case 9:
                        message.oneTimePassword = input.readString();
                        break;
                    case 10:
                        message.clientIPAddress = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, TRADE_REQ_LOGIN message) throws IOException
        {
            if(message.tradingDay == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.tradingDay, false);

            if(message.brokerID == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.brokerID, false);

            if(message.userID == null)
                throw new UninitializedMessageException(message);
            output.writeString(3, message.userID, false);

            if(message.password == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.password, false);

            if(message.userProductInfo != null)
                output.writeString(5, message.userProductInfo, false);

            if(message.interfaceProductInfo != null)
                output.writeString(6, message.interfaceProductInfo, false);

            if(message.protocolInfo != null)
                output.writeString(7, message.protocolInfo, false);

            if(message.macAddress != null)
                output.writeString(8, message.macAddress, false);

            if(message.oneTimePassword != null)
                output.writeString(9, message.oneTimePassword, false);

            if(message.clientIPAddress != null)
                output.writeString(10, message.clientIPAddress, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "tradingDay";
                case 2: return "brokerID";
                case 3: return "userID";
                case 4: return "password";
                case 5: return "userProductInfo";
                case 6: return "interfaceProductInfo";
                case 7: return "protocolInfo";
                case 8: return "macAddress";
                case 9: return "oneTimePassword";
                case 10: return "clientIPAddress";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("tradingDay", 1);
            fieldMap.put("brokerID", 2);
            fieldMap.put("userID", 3);
            fieldMap.put("password", 4);
            fieldMap.put("userProductInfo", 5);
            fieldMap.put("interfaceProductInfo", 6);
            fieldMap.put("protocolInfo", 7);
            fieldMap.put("macAddress", 8);
            fieldMap.put("oneTimePassword", 9);
            fieldMap.put("clientIPAddress", 10);
        }
    };
    
}
