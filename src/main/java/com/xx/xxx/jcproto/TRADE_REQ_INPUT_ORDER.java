// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from trade.proto

package com.xx.xxx.jcproto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TRADE_REQ_INPUT_ORDER implements Externalizable, Message<TRADE_REQ_INPUT_ORDER>
{

    public static Schema<TRADE_REQ_INPUT_ORDER> getSchema()
    {
        return SCHEMA;
    }

    public static TRADE_REQ_INPUT_ORDER getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TRADE_REQ_INPUT_ORDER DEFAULT_INSTANCE = new TRADE_REQ_INPUT_ORDER();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String brokerID;
    String investorID;
    String instrumentID;
    String orderRef;
    String userID;
    Integer orderPriceType;
    Integer direction;
    String combOffsetFlag;
    String combHedgeFlag;
    Double limitPrice;
    Integer volumeTotalOriginal;
    Integer timeCondition;
    String gTDDate;
    Integer volumeCondition;
    Integer minVolume;
    Integer contingentCondition;
    Double stopPrice;
    Integer forceCloseReason;
    Integer isAutoSuspend;
    String businessUnit;
    Integer requestID;
    Integer userForceClose;
    Integer isSwapOrder;
    String rspcode;
    ByteString rspmsg;

    public TRADE_REQ_INPUT_ORDER()
    {
        
    }

    public TRADE_REQ_INPUT_ORDER(
        String brokerID,
        String investorID,
        String instrumentID,
        String orderRef,
        String userID,
        Integer direction,
        Double limitPrice,
        Integer volumeTotalOriginal,
        String gTDDate
    )
    {
        this.brokerID = brokerID;
        this.investorID = investorID;
        this.instrumentID = instrumentID;
        this.orderRef = orderRef;
        this.userID = userID;
        this.direction = direction;
        this.limitPrice = limitPrice;
        this.volumeTotalOriginal = volumeTotalOriginal;
        this.gTDDate = gTDDate;
    }

    // getters and setters

    // brokerID

    public String getBrokerID()
    {
        return brokerID;
    }

    public void setBrokerID(String brokerID)
    {
        this.brokerID = brokerID;
    }

    // investorID

    public String getInvestorID()
    {
        return investorID;
    }

    public void setInvestorID(String investorID)
    {
        this.investorID = investorID;
    }

    // instrumentID

    public String getInstrumentID()
    {
        return instrumentID;
    }

    public void setInstrumentID(String instrumentID)
    {
        this.instrumentID = instrumentID;
    }

    // orderRef

    public String getOrderRef()
    {
        return orderRef;
    }

    public void setOrderRef(String orderRef)
    {
        this.orderRef = orderRef;
    }

    // userID

    public String getUserID()
    {
        return userID;
    }

    public void setUserID(String userID)
    {
        this.userID = userID;
    }

    // orderPriceType

    public Integer getOrderPriceType()
    {
        return orderPriceType;
    }

    public void setOrderPriceType(Integer orderPriceType)
    {
        this.orderPriceType = orderPriceType;
    }

    // direction

    public Integer getDirection()
    {
        return direction;
    }

    public void setDirection(Integer direction)
    {
        this.direction = direction;
    }

    // combOffsetFlag

    public String getCombOffsetFlag()
    {
        return combOffsetFlag;
    }

    public void setCombOffsetFlag(String combOffsetFlag)
    {
        this.combOffsetFlag = combOffsetFlag;
    }

    // combHedgeFlag

    public String getCombHedgeFlag()
    {
        return combHedgeFlag;
    }

    public void setCombHedgeFlag(String combHedgeFlag)
    {
        this.combHedgeFlag = combHedgeFlag;
    }

    // limitPrice

    public Double getLimitPrice()
    {
        return limitPrice;
    }

    public void setLimitPrice(Double limitPrice)
    {
        this.limitPrice = limitPrice;
    }

    // volumeTotalOriginal

    public Integer getVolumeTotalOriginal()
    {
        return volumeTotalOriginal;
    }

    public void setVolumeTotalOriginal(Integer volumeTotalOriginal)
    {
        this.volumeTotalOriginal = volumeTotalOriginal;
    }

    // timeCondition

    public Integer getTimeCondition()
    {
        return timeCondition;
    }

    public void setTimeCondition(Integer timeCondition)
    {
        this.timeCondition = timeCondition;
    }

    // gTDDate

    public String getGTDDate()
    {
        return gTDDate;
    }

    public void setGTDDate(String gTDDate)
    {
        this.gTDDate = gTDDate;
    }

    // volumeCondition

    public Integer getVolumeCondition()
    {
        return volumeCondition;
    }

    public void setVolumeCondition(Integer volumeCondition)
    {
        this.volumeCondition = volumeCondition;
    }

    // minVolume

    public Integer getMinVolume()
    {
        return minVolume;
    }

    public void setMinVolume(Integer minVolume)
    {
        this.minVolume = minVolume;
    }

    // contingentCondition

    public Integer getContingentCondition()
    {
        return contingentCondition;
    }

    public void setContingentCondition(Integer contingentCondition)
    {
        this.contingentCondition = contingentCondition;
    }

    // stopPrice

    public Double getStopPrice()
    {
        return stopPrice;
    }

    public void setStopPrice(Double stopPrice)
    {
        this.stopPrice = stopPrice;
    }

    // forceCloseReason

    public Integer getForceCloseReason()
    {
        return forceCloseReason;
    }

    public void setForceCloseReason(Integer forceCloseReason)
    {
        this.forceCloseReason = forceCloseReason;
    }

    // isAutoSuspend

    public Integer getIsAutoSuspend()
    {
        return isAutoSuspend;
    }

    public void setIsAutoSuspend(Integer isAutoSuspend)
    {
        this.isAutoSuspend = isAutoSuspend;
    }

    // businessUnit

    public String getBusinessUnit()
    {
        return businessUnit;
    }

    public void setBusinessUnit(String businessUnit)
    {
        this.businessUnit = businessUnit;
    }

    // requestID

    public Integer getRequestID()
    {
        return requestID;
    }

    public void setRequestID(Integer requestID)
    {
        this.requestID = requestID;
    }

    // userForceClose

    public Integer getUserForceClose()
    {
        return userForceClose;
    }

    public void setUserForceClose(Integer userForceClose)
    {
        this.userForceClose = userForceClose;
    }

    // isSwapOrder

    public Integer getIsSwapOrder()
    {
        return isSwapOrder;
    }

    public void setIsSwapOrder(Integer isSwapOrder)
    {
        this.isSwapOrder = isSwapOrder;
    }

    // rspcode

    public String getRspcode()
    {
        return rspcode;
    }

    public void setRspcode(String rspcode)
    {
        this.rspcode = rspcode;
    }

    // rspmsg

    public ByteString getRspmsg()
    {
        return rspmsg;
    }

    public void setRspmsg(ByteString rspmsg)
    {
        this.rspmsg = rspmsg;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<TRADE_REQ_INPUT_ORDER> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<TRADE_REQ_INPUT_ORDER> SCHEMA = new Schema<TRADE_REQ_INPUT_ORDER>()
    {
        // schema methods

        public TRADE_REQ_INPUT_ORDER newMessage()
        {
            return new TRADE_REQ_INPUT_ORDER();
        }

        public Class<TRADE_REQ_INPUT_ORDER> typeClass()
        {
            return TRADE_REQ_INPUT_ORDER.class;
        }

        public String messageName()
        {
            return TRADE_REQ_INPUT_ORDER.class.getSimpleName();
        }

        public String messageFullName()
        {
            return TRADE_REQ_INPUT_ORDER.class.getName();
        }

        public boolean isInitialized(TRADE_REQ_INPUT_ORDER message)
        {
            return 
                message.brokerID != null 
                && message.investorID != null 
                && message.instrumentID != null 
                && message.orderRef != null 
                && message.userID != null 
                && message.direction != null 
                && message.limitPrice != null 
                && message.volumeTotalOriginal != null 
                && message.gTDDate != null;
        }

        public void mergeFrom(Input input, TRADE_REQ_INPUT_ORDER message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.brokerID = input.readString();
                        break;
                    case 2:
                        message.investorID = input.readString();
                        break;
                    case 3:
                        message.instrumentID = input.readString();
                        break;
                    case 4:
                        message.orderRef = input.readString();
                        break;
                    case 5:
                        message.userID = input.readString();
                        break;
                    case 6:
                        message.orderPriceType = input.readInt32();
                        break;
                    case 7:
                        message.direction = input.readInt32();
                        break;
                    case 8:
                        message.combOffsetFlag = input.readString();
                        break;
                    case 9:
                        message.combHedgeFlag = input.readString();
                        break;
                    case 10:
                        message.limitPrice = input.readDouble();
                        break;
                    case 11:
                        message.volumeTotalOriginal = input.readInt32();
                        break;
                    case 12:
                        message.timeCondition = input.readInt32();
                        break;
                    case 13:
                        message.gTDDate = input.readString();
                        break;
                    case 14:
                        message.volumeCondition = input.readInt32();
                        break;
                    case 15:
                        message.minVolume = input.readInt32();
                        break;
                    case 16:
                        message.contingentCondition = input.readInt32();
                        break;
                    case 17:
                        message.stopPrice = input.readDouble();
                        break;
                    case 18:
                        message.forceCloseReason = input.readInt32();
                        break;
                    case 19:
                        message.isAutoSuspend = input.readInt32();
                        break;
                    case 20:
                        message.businessUnit = input.readString();
                        break;
                    case 21:
                        message.requestID = input.readInt32();
                        break;
                    case 22:
                        message.userForceClose = input.readInt32();
                        break;
                    case 23:
                        message.isSwapOrder = input.readInt32();
                        break;
                    case 24:
                        message.rspcode = input.readString();
                        break;
                    case 25:
                        message.rspmsg = input.readBytes();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, TRADE_REQ_INPUT_ORDER message) throws IOException
        {
            if(message.brokerID == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.brokerID, false);

            if(message.investorID == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.investorID, false);

            if(message.instrumentID == null)
                throw new UninitializedMessageException(message);
            output.writeString(3, message.instrumentID, false);

            if(message.orderRef == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.orderRef, false);

            if(message.userID == null)
                throw new UninitializedMessageException(message);
            output.writeString(5, message.userID, false);

            if(message.orderPriceType != null)
                output.writeInt32(6, message.orderPriceType, false);

            if(message.direction == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(7, message.direction, false);

            if(message.combOffsetFlag != null)
                output.writeString(8, message.combOffsetFlag, false);

            if(message.combHedgeFlag != null)
                output.writeString(9, message.combHedgeFlag, false);

            if(message.limitPrice == null)
                throw new UninitializedMessageException(message);
            output.writeDouble(10, message.limitPrice, false);

            if(message.volumeTotalOriginal == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(11, message.volumeTotalOriginal, false);

            if(message.timeCondition != null)
                output.writeInt32(12, message.timeCondition, false);

            if(message.gTDDate == null)
                throw new UninitializedMessageException(message);
            output.writeString(13, message.gTDDate, false);

            if(message.volumeCondition != null)
                output.writeInt32(14, message.volumeCondition, false);

            if(message.minVolume != null)
                output.writeInt32(15, message.minVolume, false);

            if(message.contingentCondition != null)
                output.writeInt32(16, message.contingentCondition, false);

            if(message.stopPrice != null)
                output.writeDouble(17, message.stopPrice, false);

            if(message.forceCloseReason != null)
                output.writeInt32(18, message.forceCloseReason, false);

            if(message.isAutoSuspend != null)
                output.writeInt32(19, message.isAutoSuspend, false);

            if(message.businessUnit != null)
                output.writeString(20, message.businessUnit, false);

            if(message.requestID != null)
                output.writeInt32(21, message.requestID, false);

            if(message.userForceClose != null)
                output.writeInt32(22, message.userForceClose, false);

            if(message.isSwapOrder != null)
                output.writeInt32(23, message.isSwapOrder, false);

            if(message.rspcode != null)
                output.writeString(24, message.rspcode, false);

            if(message.rspmsg != null)
                output.writeBytes(25, message.rspmsg, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "brokerID";
                case 2: return "investorID";
                case 3: return "instrumentID";
                case 4: return "orderRef";
                case 5: return "userID";
                case 6: return "orderPriceType";
                case 7: return "direction";
                case 8: return "combOffsetFlag";
                case 9: return "combHedgeFlag";
                case 10: return "limitPrice";
                case 11: return "volumeTotalOriginal";
                case 12: return "timeCondition";
                case 13: return "gTDDate";
                case 14: return "volumeCondition";
                case 15: return "minVolume";
                case 16: return "contingentCondition";
                case 17: return "stopPrice";
                case 18: return "forceCloseReason";
                case 19: return "isAutoSuspend";
                case 20: return "businessUnit";
                case 21: return "requestID";
                case 22: return "userForceClose";
                case 23: return "isSwapOrder";
                case 24: return "rspcode";
                case 25: return "rspmsg";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("brokerID", 1);
            fieldMap.put("investorID", 2);
            fieldMap.put("instrumentID", 3);
            fieldMap.put("orderRef", 4);
            fieldMap.put("userID", 5);
            fieldMap.put("orderPriceType", 6);
            fieldMap.put("direction", 7);
            fieldMap.put("combOffsetFlag", 8);
            fieldMap.put("combHedgeFlag", 9);
            fieldMap.put("limitPrice", 10);
            fieldMap.put("volumeTotalOriginal", 11);
            fieldMap.put("timeCondition", 12);
            fieldMap.put("gTDDate", 13);
            fieldMap.put("volumeCondition", 14);
            fieldMap.put("minVolume", 15);
            fieldMap.put("contingentCondition", 16);
            fieldMap.put("stopPrice", 17);
            fieldMap.put("forceCloseReason", 18);
            fieldMap.put("isAutoSuspend", 19);
            fieldMap.put("businessUnit", 20);
            fieldMap.put("requestID", 21);
            fieldMap.put("userForceClose", 22);
            fieldMap.put("isSwapOrder", 23);
            fieldMap.put("rspcode", 24);
            fieldMap.put("rspmsg", 25);
        }
    };
    
}
