// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from trade.proto

package com.xx.xxx.jcproto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TRADE_RSP_UPDATE_PWD implements Externalizable, Message<TRADE_RSP_UPDATE_PWD>
{

    public static Schema<TRADE_RSP_UPDATE_PWD> getSchema()
    {
        return SCHEMA;
    }

    public static TRADE_RSP_UPDATE_PWD getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TRADE_RSP_UPDATE_PWD DEFAULT_INSTANCE = new TRADE_RSP_UPDATE_PWD();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String brokerID;
    String accountID;
    ByteString rspcode;
    String rspmsg;

    public TRADE_RSP_UPDATE_PWD()
    {
        
    }

    public TRADE_RSP_UPDATE_PWD(
        String brokerID,
        String accountID,
        ByteString rspcode,
        String rspmsg
    )
    {
        this.brokerID = brokerID;
        this.accountID = accountID;
        this.rspcode = rspcode;
        this.rspmsg = rspmsg;
    }

    // getters and setters

    // brokerID

    public String getBrokerID()
    {
        return brokerID;
    }

    public void setBrokerID(String brokerID)
    {
        this.brokerID = brokerID;
    }

    // accountID

    public String getAccountID()
    {
        return accountID;
    }

    public void setAccountID(String accountID)
    {
        this.accountID = accountID;
    }

    // rspcode

    public ByteString getRspcode()
    {
        return rspcode;
    }

    public void setRspcode(ByteString rspcode)
    {
        this.rspcode = rspcode;
    }

    // rspmsg

    public String getRspmsg()
    {
        return rspmsg;
    }

    public void setRspmsg(String rspmsg)
    {
        this.rspmsg = rspmsg;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<TRADE_RSP_UPDATE_PWD> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<TRADE_RSP_UPDATE_PWD> SCHEMA = new Schema<TRADE_RSP_UPDATE_PWD>()
    {
        // schema methods

        public TRADE_RSP_UPDATE_PWD newMessage()
        {
            return new TRADE_RSP_UPDATE_PWD();
        }

        public Class<TRADE_RSP_UPDATE_PWD> typeClass()
        {
            return TRADE_RSP_UPDATE_PWD.class;
        }

        public String messageName()
        {
            return TRADE_RSP_UPDATE_PWD.class.getSimpleName();
        }

        public String messageFullName()
        {
            return TRADE_RSP_UPDATE_PWD.class.getName();
        }

        public boolean isInitialized(TRADE_RSP_UPDATE_PWD message)
        {
            return 
                message.brokerID != null 
                && message.accountID != null 
                && message.rspcode != null 
                && message.rspmsg != null;
        }

        public void mergeFrom(Input input, TRADE_RSP_UPDATE_PWD message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.brokerID = input.readString();
                        break;
                    case 2:
                        message.accountID = input.readString();
                        break;
                    case 3:
                        message.rspcode = input.readBytes();
                        break;
                    case 4:
                        message.rspmsg = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, TRADE_RSP_UPDATE_PWD message) throws IOException
        {
            if(message.brokerID == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.brokerID, false);

            if(message.accountID == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.accountID, false);

            if(message.rspcode == null)
                throw new UninitializedMessageException(message);
            output.writeBytes(3, message.rspcode, false);

            if(message.rspmsg == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.rspmsg, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "brokerID";
                case 2: return "accountID";
                case 3: return "rspcode";
                case 4: return "rspmsg";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("brokerID", 1);
            fieldMap.put("accountID", 2);
            fieldMap.put("rspcode", 3);
            fieldMap.put("rspmsg", 4);
        }
    };
    
}
