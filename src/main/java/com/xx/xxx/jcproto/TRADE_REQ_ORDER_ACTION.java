// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from trade.proto

package com.xx.xxx.jcproto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class TRADE_REQ_ORDER_ACTION implements Externalizable, Message<TRADE_REQ_ORDER_ACTION>
{

    public static Schema<TRADE_REQ_ORDER_ACTION> getSchema()
    {
        return SCHEMA;
    }

    public static TRADE_REQ_ORDER_ACTION getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final TRADE_REQ_ORDER_ACTION DEFAULT_INSTANCE = new TRADE_REQ_ORDER_ACTION();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String brokerID;
    String investorID;
    Long orderActionRef;
    String orderRef;
    Integer requestID;
    Long frontID;
    Long sessionID;
    String exchangeID;
    String orderSysID;
    Integer actionFlag;
    Double limitPrice;
    Integer volumeChange;
    String userID;
    String instrumentID;
    String rspcode;
    ByteString rspmsg;

    public TRADE_REQ_ORDER_ACTION()
    {
        
    }

    public TRADE_REQ_ORDER_ACTION(
        String brokerID,
        String investorID,
        Long orderActionRef,
        String orderRef,
        Integer requestID,
        String orderSysID,
        Integer actionFlag,
        Integer volumeChange,
        String instrumentID
    )
    {
        this.brokerID = brokerID;
        this.investorID = investorID;
        this.orderActionRef = orderActionRef;
        this.orderRef = orderRef;
        this.requestID = requestID;
        this.orderSysID = orderSysID;
        this.actionFlag = actionFlag;
        this.volumeChange = volumeChange;
        this.instrumentID = instrumentID;
    }

    // getters and setters

    // brokerID

    public String getBrokerID()
    {
        return brokerID;
    }

    public void setBrokerID(String brokerID)
    {
        this.brokerID = brokerID;
    }

    // investorID

    public String getInvestorID()
    {
        return investorID;
    }

    public void setInvestorID(String investorID)
    {
        this.investorID = investorID;
    }

    // orderActionRef

    public Long getOrderActionRef()
    {
        return orderActionRef;
    }

    public void setOrderActionRef(Long orderActionRef)
    {
        this.orderActionRef = orderActionRef;
    }

    // orderRef

    public String getOrderRef()
    {
        return orderRef;
    }

    public void setOrderRef(String orderRef)
    {
        this.orderRef = orderRef;
    }

    // requestID

    public Integer getRequestID()
    {
        return requestID;
    }

    public void setRequestID(Integer requestID)
    {
        this.requestID = requestID;
    }

    // frontID

    public Long getFrontID()
    {
        return frontID;
    }

    public void setFrontID(Long frontID)
    {
        this.frontID = frontID;
    }

    // sessionID

    public Long getSessionID()
    {
        return sessionID;
    }

    public void setSessionID(Long sessionID)
    {
        this.sessionID = sessionID;
    }

    // exchangeID

    public String getExchangeID()
    {
        return exchangeID;
    }

    public void setExchangeID(String exchangeID)
    {
        this.exchangeID = exchangeID;
    }

    // orderSysID

    public String getOrderSysID()
    {
        return orderSysID;
    }

    public void setOrderSysID(String orderSysID)
    {
        this.orderSysID = orderSysID;
    }

    // actionFlag

    public Integer getActionFlag()
    {
        return actionFlag;
    }

    public void setActionFlag(Integer actionFlag)
    {
        this.actionFlag = actionFlag;
    }

    // limitPrice

    public Double getLimitPrice()
    {
        return limitPrice;
    }

    public void setLimitPrice(Double limitPrice)
    {
        this.limitPrice = limitPrice;
    }

    // volumeChange

    public Integer getVolumeChange()
    {
        return volumeChange;
    }

    public void setVolumeChange(Integer volumeChange)
    {
        this.volumeChange = volumeChange;
    }

    // userID

    public String getUserID()
    {
        return userID;
    }

    public void setUserID(String userID)
    {
        this.userID = userID;
    }

    // instrumentID

    public String getInstrumentID()
    {
        return instrumentID;
    }

    public void setInstrumentID(String instrumentID)
    {
        this.instrumentID = instrumentID;
    }

    // rspcode

    public String getRspcode()
    {
        return rspcode;
    }

    public void setRspcode(String rspcode)
    {
        this.rspcode = rspcode;
    }

    // rspmsg

    public ByteString getRspmsg()
    {
        return rspmsg;
    }

    public void setRspmsg(ByteString rspmsg)
    {
        this.rspmsg = rspmsg;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<TRADE_REQ_ORDER_ACTION> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<TRADE_REQ_ORDER_ACTION> SCHEMA = new Schema<TRADE_REQ_ORDER_ACTION>()
    {
        // schema methods

        public TRADE_REQ_ORDER_ACTION newMessage()
        {
            return new TRADE_REQ_ORDER_ACTION();
        }

        public Class<TRADE_REQ_ORDER_ACTION> typeClass()
        {
            return TRADE_REQ_ORDER_ACTION.class;
        }

        public String messageName()
        {
            return TRADE_REQ_ORDER_ACTION.class.getSimpleName();
        }

        public String messageFullName()
        {
            return TRADE_REQ_ORDER_ACTION.class.getName();
        }

        public boolean isInitialized(TRADE_REQ_ORDER_ACTION message)
        {
            return 
                message.brokerID != null 
                && message.investorID != null 
                && message.orderActionRef != null 
                && message.orderRef != null 
                && message.requestID != null 
                && message.orderSysID != null 
                && message.actionFlag != null 
                && message.volumeChange != null 
                && message.instrumentID != null;
        }

        public void mergeFrom(Input input, TRADE_REQ_ORDER_ACTION message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.brokerID = input.readString();
                        break;
                    case 2:
                        message.investorID = input.readString();
                        break;
                    case 3:
                        message.orderActionRef = input.readInt64();
                        break;
                    case 4:
                        message.orderRef = input.readString();
                        break;
                    case 5:
                        message.requestID = input.readInt32();
                        break;
                    case 6:
                        message.frontID = input.readInt64();
                        break;
                    case 7:
                        message.sessionID = input.readInt64();
                        break;
                    case 8:
                        message.exchangeID = input.readString();
                        break;
                    case 9:
                        message.orderSysID = input.readString();
                        break;
                    case 10:
                        message.actionFlag = input.readInt32();
                        break;
                    case 11:
                        message.limitPrice = input.readDouble();
                        break;
                    case 12:
                        message.volumeChange = input.readInt32();
                        break;
                    case 13:
                        message.userID = input.readString();
                        break;
                    case 14:
                        message.instrumentID = input.readString();
                        break;
                    case 15:
                        message.rspcode = input.readString();
                        break;
                    case 16:
                        message.rspmsg = input.readBytes();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, TRADE_REQ_ORDER_ACTION message) throws IOException
        {
            if(message.brokerID == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.brokerID, false);

            if(message.investorID == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.investorID, false);

            if(message.orderActionRef == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(3, message.orderActionRef, false);

            if(message.orderRef == null)
                throw new UninitializedMessageException(message);
            output.writeString(4, message.orderRef, false);

            if(message.requestID == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(5, message.requestID, false);

            if(message.frontID != null)
                output.writeInt64(6, message.frontID, false);

            if(message.sessionID != null)
                output.writeInt64(7, message.sessionID, false);

            if(message.exchangeID != null)
                output.writeString(8, message.exchangeID, false);

            if(message.orderSysID == null)
                throw new UninitializedMessageException(message);
            output.writeString(9, message.orderSysID, false);

            if(message.actionFlag == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(10, message.actionFlag, false);

            if(message.limitPrice != null)
                output.writeDouble(11, message.limitPrice, false);

            if(message.volumeChange == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(12, message.volumeChange, false);

            if(message.userID != null)
                output.writeString(13, message.userID, false);

            if(message.instrumentID == null)
                throw new UninitializedMessageException(message);
            output.writeString(14, message.instrumentID, false);

            if(message.rspcode != null)
                output.writeString(15, message.rspcode, false);

            if(message.rspmsg != null)
                output.writeBytes(16, message.rspmsg, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "brokerID";
                case 2: return "investorID";
                case 3: return "orderActionRef";
                case 4: return "orderRef";
                case 5: return "requestID";
                case 6: return "frontID";
                case 7: return "sessionID";
                case 8: return "exchangeID";
                case 9: return "orderSysID";
                case 10: return "actionFlag";
                case 11: return "limitPrice";
                case 12: return "volumeChange";
                case 13: return "userID";
                case 14: return "instrumentID";
                case 15: return "rspcode";
                case 16: return "rspmsg";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("brokerID", 1);
            fieldMap.put("investorID", 2);
            fieldMap.put("orderActionRef", 3);
            fieldMap.put("orderRef", 4);
            fieldMap.put("requestID", 5);
            fieldMap.put("frontID", 6);
            fieldMap.put("sessionID", 7);
            fieldMap.put("exchangeID", 8);
            fieldMap.put("orderSysID", 9);
            fieldMap.put("actionFlag", 10);
            fieldMap.put("limitPrice", 11);
            fieldMap.put("volumeChange", 12);
            fieldMap.put("userID", 13);
            fieldMap.put("instrumentID", 14);
            fieldMap.put("rspcode", 15);
            fieldMap.put("rspmsg", 16);
        }
    };
    
}
